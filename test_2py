import cv2 as cv
import numpy as np
import glob
import pickle


chessboardSize = (6, 6)
#frameSize = (500, 300)

objp = np.zeros((chessboardSize[0] * chessboardSize[1], 3), np.float32)
objp[:, :2] = np.mgrid[0 : chessboardSize[0], 0 : chessboardSize[1]].T.reshape(-1, 2)

size_of_chessboard_squares_mm = 60
objp = objp * size_of_chessboard_squares_mm

    # Arrays to store object points and image points from all the images.
objpoints = []  # 3d point in real world space
imgpoints = []  # 2d points in image plane.
criteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 30, 0.001)
images = glob.glob("*.jpeg")
for image in images:
    img = cv.imread(image)
    
    img = cv.resize(img,(2560,1440))
    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
    cv.imshow('chl ja',gray)
        # Find the chess board corners
    ret, corners = cv.findChessboardCorners(gray, chessboardSize, None)

        # If found, add object points, image points (after refining them)
    if ret == True:
        print("True")
        objpoints.append(objp)
        corners2 = cv.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)
        imgpoints.append(corners)

        # Draw and display the corners
        img_with_corners = cv.drawChessboardCorners(img, chessboardSize, corners2, ret)
        cv.imshow("img", img_with_corners)
        cv.waitKey(1000)
    else:
        print("False")
    cv.waitKey(0)
cv.destroyAllWindows()
objectpoint_n = np.array(objpoints)
print(objectpoint_n.shape)
imgpoints_n = np.array(imgpoints)
print(imgpoints[0].shape)
print(objectpoint_n.shape)
